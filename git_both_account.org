#+TITLE:  Multiple github 계정 사용하기 on mac
#+AUTHOR: Holy Frege
#+DESCRIPTION: Org-HTML export made simple.
#+KEYWORDS:  org-mode, export, html, theme, style, css, js, bigblow
#+LANGUAGE:  en
#+OPTIONS:   H:4 toc:t num:2  ^:nil
#+MACRO: color @@html:<font color=></font>@@
#+PROPERTY:  header-args :padline no
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+LATEX_HEADER: \usepackage{kotex}
#+latex_header: \hypersetup{colorlinks=true}
* issue
#+begin_note
나는 회사 github계정과 개인 github계정이 있다. 그리고 연구 계정도 있다. 각 계정마다, repository가 있는데, 특정 계정으로 push를 했을 때는 문제 없이 된다. 그런데 다른계정으로 push할 때는 다음과 같은 에러가 발생한다.
#+end_note
#+CAPTION: error1
#+NAME: 
#+attr_latex: :width 100px
[[./img/error1.png]]
즉 push가 안된다는 문제가 있다. 결론적으로 해결할 순 있다. 우선 해결책 부터 쓰고, 과정을 설명하겠다.
* 해결법
- 현재 push하고자 하는 repository의 사용자를 알아야 한다. (git config --list)
  #+CAPTION: config
#+NAME: 
#+attr_latex: :width 100px
[[./img/cofig.png]]

- 여기선 사용자가 누구인지만 알면 된다. 즉 email주소다.  그리고, osxkeychain에 id와 pw가 있으니까 그걸 사용하겠다는 정보도 있다.
- osxkeychain을 실행한다. (launchpad에서 keychain을 치면 app을 실행할 수 있다.)
- keychain에서 github으로 검색한다.
  #+CAPTION: login
#+NAME: login
#+attr_latex: :width 100px
[[./img/login.png]]
login할때 사용되는 github의 정보를 본다.

#+CAPTION: login2
#+NAME: 
#+attr_html: :width 400px :height 300px
#+attr_latex: :width 100px
[[./img/login2.png]]

이렇게 해서 push할 수 있다. 또 다른 계정의 repository로 가서 push한다면 또 이 과정을 거쳐야 한다.
왜냐면, *osxkeychain의 githup login keychain이 단 1개만 존재하기 때문이다.* github이라는 사이트에 여러개의 계정이 없다고 생각하고 하나의 계정만 존재한다. 그래서 하나의 keychain을 정보를 변경해가면서 사용해야 한다. 아래 내정보를 기입했다.
* 내정보
1) holy_frege@fastmail.com
   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
2) pncltd@hanmail.net(pncltd755!)
   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
3) research.jeju@gmail.com(jeju!123)
   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
* 개념
** git-config
- git에서 commit을 만들때, 사용자 정보가 들어간다.
- 설정이 없으면 commit이 만들어지지 않는다.
- repository별(.git/config), global(.gitconfig), system(/etc/gitconfig)에서 설정할 수 있다.
*** 나의 정책

** ssh


* 1_ssh key 생성
#+begin_note
.ssh폴더에서 2개의 ssh public key를 만들 것이다. 만드는 과정은 아래 그림을 참조한다.
#+end_note
#+CAPTION: github 개인
#+NAME: 
#+attr_html: :width 800px
#+attr_latex: :width 100px
[[./img/bothgithub1.png]]

#+CAPTION: github 회사
#+NAME: 
#+attr_html: :width 800px
#+attr_latex: :width 100px
[[./img/bothgithub2.png]]
* 2_ssh-agent사용
#+begin_note
ssh-agent는 private key와 public key를 관리하는 daemon이다. 일반적으로 mac에는 기본적으로 ssh-agent가 떠 있다. agent는 등록된 key를 사용해서 접속해야 하는 경우, 자동으로 처리를 해주기 때문에, ssh-agent에 해당 key를 등록해준다. ssh-add를 사용해서 ssh-agent에 등록을 한다. 
#+end_note
#+CAPTION: ssh-agent등록
#+NAME: 
#+attr_html: :width 800px
#+attr_latex: :width 100px
[[./img/bothgithub3.png]]
* 3_public key를 github에 등록
#+begin_note
개인 github에는 개인 public key를 등록한다. 회사 github에는 회사 public key를 등록한다.
github->settings->ssh keys등록하는 곳에 등록한다.
#+end_note
* 4_ssh config설정
#+begin_note
.ssh아래에 config파일을 만든다. 그리고 config파일에서 host와 public key를 명시해야 한다. config설정파일을 꼭 만들어야 하는가?음..이게 무슨 말이냐면? 우리는 보통 ssh test@example.com과 같이 ssh연결을 시도한다. 이 연결에는 숨겨진 동작이 있는데,  ssh는 .ssh/id_rsa라는 key파일에서 public key를 사용해서 test란 id로 접속을 시도한다. 즉 ssh key가 자동으로 사용된다는 것이다. ssh 서버가 2대이거나, github계정이 2개라면 하나는 접속하지 못한다. 동일한 ssh key를 사용하기 때문이다. A라는 server에는 id_rsa_me를 사용하고, B라는 server에는 id_rsa_work를 사용한다면, 이를 구분해 줘야 한다. 안그렇다면, 동일한 ssh key를 사용할 것이기 때문이다. 아래와 같이 설정한다. Host는 이름으로 봐도 좋고, HostName은 실제 접속주소(ip or domain)를 의미한다. 주의할 점은 git clone할때 주소는 git@github.com:~~.git으로 하면 안된다. git@github.com-me:로 해야 한다.
#+end_note
 #+begin_tip
 # 개인 계정
Host github.com-me
	HostName github.com
	User git
	IdentityFile ~/.ssh/id_rsa_me

# 회사 계정
Host github.com-work
	HostName github.com
	User git
	IdentityFile ~/.ssh/id_rsa_work
 #+end_tip
* 5_git config 설정
#+begin_note
- ~/.gitconfig라는 파일을 수정해야 한다. 여기에 기입하면, git global로 설정하는 것과 같다.
- 여러개의 계정을 등록해야 하는데, 방법은 includeIf라는 문장을 사용해서 폴더별로 분류한다.
- default로 하나를 설정해서 [user]로 결정하고, 나머지는 폴더별로 다른 파일로 기술한다.
#+end_note
 #+begin_example
[user] 
        email = {YourPersonalGithub}@gmail.com
        name = {YourPersonalGithubName}
[includeIf “gitdir:~/Company-git/”] 
        path = .gitconfig-company
 #+end_example

#+CAPTION: 
#+NAME: 
#+attr_html: :width 800px
#+attr_latex: :width 100px
[[./img/bothgithub4.png]]

 #+begin_tip
 이렇게 project별로 설정을 해주게 된다면, 실제 정상적으로 동작하는지 여부를 테스트하면 된다. 
 #+end_tip
* 6_Test
#+begin_note
1. 첫번째로 test할 것은 ssh에 설정된 config가 제대로 동작하는지 확인하는 것이다.
2. 두번째로 test할 것은 git config 설정이 제대로 되었는가 하는 것이다. 제대로 되어 있다면, git push와 git pull하는데 문제가 없을 것이다. => 문제가 없다.
#+end_note
#+CAPTION: both
#+NAME: 
#+attr_html: :width 800px
#+attr_latex: :width 100px
[[./img/bothgithub5.png]]
* 7_error
#+begin_note
permission error가 나올 경우, 대부분은 ssh-agent에 key가 없어서 발생하는 문제다. 이전에 ssh-add를 통해서 key를 agent에 등록했으나, computer가 다시 부팅되었거나 하면, key가 없어진다. 그래서 다시  ssh-add를 통해서 키를 등록해주어야 한다. 나는 .ssh/config파일에 기술되어 있기 때문에 굳이 ssh-add를 할 필요가 없다고 생각했는데, 그렇지 않은 것 같다.

#+end_note
* 참조
https://hyeon9mak.github.io/github-personal-access-token
https://medium.com/@ibrahimlawal/developing-with-multiple-github-accounts-on-one-macbook-94ff6d4ab9aca
https://www.hahwul.com/2018/08/22/git-credential-helper/
